name: Optimized Backend Pipeline

on:
  push:
    branches:
      - master
      - staging
      - develop
      - 'feature/**'

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_IMAGE: backend
  PORT: 5000

jobs:
  build:
    runs-on: self-hosted
    outputs:
      image-tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Registry
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/staging'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Cache Docker Image
        run: |
          docker build \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new \
            -t $DOCKER_IMAGE:${{ github.ref_name }} \
            -t $DOCKER_IMAGE:latest \
            .
          rm -rf /tmp/.buildx-cache && mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Push to Registry (Production/Staging)
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/staging'
        run: |
          docker push $DOCKER_IMAGE:${{ github.ref_name }}
          docker push $DOCKER_IMAGE:latest

      - name: Set Image Tag Output
        id: set-tag
        run: echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT

  test:
    runs-on: self-hosted
    needs: build
    if: startsWith(github.ref, 'refs/heads/feature/') || github.ref == 'refs/heads/develop'
    steps:
      - name: Run Unit Tests
        run: |
          docker run --rm \
            --cpus=1 \
            -v $(pwd)/test-results:/app/test-results \
            $DOCKER_IMAGE:${{ needs.build.outputs.image-tag }} \
            sh -c "npm test -- --reporters=jest-junit && mv junit.xml test-results/unit-test-results.xml"

      - name: Run Integration Tests
        if: github.ref == 'refs/heads/develop'
        run: |
          docker run --rm \
            --cpus=1.5 \
            -e NODE_ENV=test \
            -e TEST_DB_URL=${{ secrets.TEST_DB_URL }} \
            -v $(pwd)/test-results:/app/test-results \
            $DOCKER_IMAGE:${{ needs.build.outputs.image-tag }} \
            sh -c "npm run test:integration -- --reporters=jest-junit && mv junit.xml test-results/integration-test-results.xml"

      - name: Publish Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: test-results/*.xml

  deploy:
    runs-on: self-hosted
    needs: [build, test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/develop'
    steps:
      - name: Stop and Remove Existing Container
        timeout-minutes: 2
        run: |
          timeout 60 docker stop backend-${{ github.ref_name }} || true
          docker rm backend-${{ github.ref_name }} || true

      - name: Deploy Container
        run: |
          docker run -d \
            --name backend-${{ github.ref_name }} \
            -p $PORT:$PORT \
            --restart unless-stopped \
            --cpus="1.5" \
            --memory="512m" \
            -e ENVIRONMENT=${{ github.ref_name }} \
            -e PORT=$PORT \
            -e DB_URL=${{ secrets.DB_URL }} \
            -v /var/log/backend:/app/logs \
            $DOCKER_IMAGE:${{ needs.build.outputs.image-tag }}

      - name: Health Check
        run: |
          sleep 10
          curl --fail http://localhost:$PORT/health || exit 1

  notify:
    runs-on: ubuntu-latest
    needs: [build, test, deploy]
    if: always()
    steps:
      - name: Send Slack Notification
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          slack-message: |
            Pipeline failed: ${{ github.workflow }} on ${{ github.ref }}
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Failed Job: ${{ contains(needs.*.result, 'failure') }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
